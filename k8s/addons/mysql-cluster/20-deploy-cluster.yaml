---
# pvc to share across pods of statefulset
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-cluster-share
  namespace: mysql-cluster
spec:
  ## same as storage define name
  storageClassName: nfs-dynamic-mysql-cluster
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 1Gi

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql-cluster
  namespace: mysql-cluster
  labels:
    app: mysql-cluster
    version: v8.0.24
spec:
  serviceName: mysql-cluster
  replicas: 2
  selector:
    matchLabels:
      app: mysql-cluster
      version: v8.0.24
  template:
    metadata:
      labels:
        app: mysql-cluster
        version: v8.0.24
    spec:
      initContainers:
      - name: init-mysql
        image: ${DOCKER_HUB}/mysql/mysql-server:8.0.24
        imagePullPolicy: IfNotPresent
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-cluster-secret
              key: root-pwd
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        command:
        - bash
        - -c
        - |
          set -ex
          echo "Running in init-mysql..."
          # generate server-id according to Pod's sequence
          [[ ${HOSTNAME} =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          echo "[mysqld]" > /mnt/conf.d/server-id.cnf
          # Adding 100 to ordinal for avoiding server-id be 0.
          echo "server-id=$((100 + ${ordinal}))" >> /mnt/conf.d/server-id.cnf
          # Copy master segment from ConfigMap on master node if Pod's sequence is 0.
          if [[ ${ordinal} -eq 0 ]]; then
            cp /mnt/config-map/master.cnf /mnt/conf.d/
          else
            cp /mnt/config-map/slave.cnf /mnt/conf.d/
          fi
          # If master node starts up on first time, create user 'root'@'%' and backup data.
          # If slave node starts up on first time, import data & change master to.
          # rm -fr /mnt/docker-entrypoint-initdb.d/*.*
          # [ -f /var/lib/mysql-cluster/${HOSTNAME} ] && exit 0
          # The script files (shell & sql) in /docker-entrypoint-initdb.d/ will be run only once.
          if [[ ${ordinal} -eq 0 ]]; then
            # master node
            cp /mnt/config-map/10-master-root.sql /mnt/docker-entrypoint-initdb.d/
          else
            # slave node
            cp /mnt/config-map/10-slave-export-master.sh /mnt/docker-entrypoint-initdb.d/
            cp /mnt/config-map/20-slave.sql /mnt/docker-entrypoint-initdb.d/
          fi
          cp /mnt/config-map/99-init-end.sh /mnt/docker-entrypoint-initdb.d/
          # sed environment variables
          sed -i "s#\${MYSQL_ROOT_PASSWORD}#${MYSQL_ROOT_PASSWORD}#g" /mnt/docker-entrypoint-initdb.d/*.*
          sed -i "s#\${MY_POD_NAMESPACE}#${MY_POD_NAMESPACE}#g" /mnt/docker-entrypoint-initdb.d/*.*
        volumeMounts:
        - mountPath: /mnt/config-map
          name: config-map
        - mountPath: /mnt/conf.d
          name: conf
        - mountPath: /mnt/docker-entrypoint-initdb.d/
          name: docker-initdb
        - mountPath: /var/lib/mysql-cluster
          name: mysql-cluster-share
      containers:
      - name: mysql-cluster
        image: ${DOCKER_HUB}/mysql/mysql-server:8.0.24
        imagePullPolicy: IfNotPresent
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-cluster-secret
              key: root-pwd
        command:
        - bash
        - -c
        - |
          set -ex
          echo -e "\n!includedir /etc/my.cnf.d/" >> /etc/my.cnf
          /entrypoint.sh --defaults-file=/etc/my.cnf
        ports:
        - containerPort: 3306
          name: mysql
        - containerPort: 33060
          name: mysqlx
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-var-lib
        - mountPath: /var/lib/mysql-cluster
          name: mysql-cluster-share
        - mountPath: /etc/my.cnf.d
          name: conf
        - mountPath: /docker-entrypoint-initdb.d
          name: docker-initdb
        resources:
          requests:
            cpu: 500m
            memory: 500Mi
        livenessProbe:
          tcpSocket:
            port: 3306
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          tcpSocket:
            port: 3306
          initialDelaySeconds: 10
          periodSeconds: 2
          timeoutSeconds: 1
      volumes:
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          name: mysql-cluster
      - name: configmap-init
        configMap:
          name: mysql-cluster-init
      - name: docker-initdb
        emptyDir: {}
      - name: mysql-cluster-share
        persistentVolumeClaim:
          claimName: mysql-cluster-share
  volumeClaimTemplates:
  - metadata:
      name: mysql-var-lib
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: nfs-dynamic-mysql-cluster
      resources:
        requests:
          storage: 3Gi
